// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/notification/messages.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebSocketService_SendMessage_FullMethodName    = "/canaanadvisors.WebSocketService/SendMessage"
	WebSocketService_ReceiveMessage_FullMethodName = "/canaanadvisors.WebSocketService/ReceiveMessage"
)

// WebSocketServiceClient is the client API for WebSocketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSocketServiceClient interface {
	SendMessage(ctx context.Context, in *MessageSendRequest, opts ...grpc.CallOption) (*MessageSendResponse, error)
	ReceiveMessage(ctx context.Context, opts ...grpc.CallOption) (WebSocketService_ReceiveMessageClient, error)
}

type webSocketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSocketServiceClient(cc grpc.ClientConnInterface) WebSocketServiceClient {
	return &webSocketServiceClient{cc}
}

func (c *webSocketServiceClient) SendMessage(ctx context.Context, in *MessageSendRequest, opts ...grpc.CallOption) (*MessageSendResponse, error) {
	out := new(MessageSendResponse)
	err := c.cc.Invoke(ctx, WebSocketService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSocketServiceClient) ReceiveMessage(ctx context.Context, opts ...grpc.CallOption) (WebSocketService_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &WebSocketService_ServiceDesc.Streams[0], WebSocketService_ReceiveMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webSocketServiceReceiveMessageClient{stream}
	return x, nil
}

type WebSocketService_ReceiveMessageClient interface {
	Send(*MessageReceiveRequest) error
	Recv() (*MessageReceiveResponse, error)
	grpc.ClientStream
}

type webSocketServiceReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *webSocketServiceReceiveMessageClient) Send(m *MessageReceiveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webSocketServiceReceiveMessageClient) Recv() (*MessageReceiveResponse, error) {
	m := new(MessageReceiveResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocketServiceServer is the server API for WebSocketService service.
// All implementations must embed UnimplementedWebSocketServiceServer
// for forward compatibility
type WebSocketServiceServer interface {
	SendMessage(context.Context, *MessageSendRequest) (*MessageSendResponse, error)
	ReceiveMessage(WebSocketService_ReceiveMessageServer) error
	mustEmbedUnimplementedWebSocketServiceServer()
}

// UnimplementedWebSocketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebSocketServiceServer struct {
}

func (UnimplementedWebSocketServiceServer) SendMessage(context.Context, *MessageSendRequest) (*MessageSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedWebSocketServiceServer) ReceiveMessage(WebSocketService_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedWebSocketServiceServer) mustEmbedUnimplementedWebSocketServiceServer() {}

// UnsafeWebSocketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSocketServiceServer will
// result in compilation errors.
type UnsafeWebSocketServiceServer interface {
	mustEmbedUnimplementedWebSocketServiceServer()
}

func RegisterWebSocketServiceServer(s grpc.ServiceRegistrar, srv WebSocketServiceServer) {
	s.RegisterService(&WebSocketService_ServiceDesc, srv)
}

func _WebSocketService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSocketServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebSocketService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSocketServiceServer).SendMessage(ctx, req.(*MessageSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSocketService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebSocketServiceServer).ReceiveMessage(&webSocketServiceReceiveMessageServer{stream})
}

type WebSocketService_ReceiveMessageServer interface {
	Send(*MessageReceiveResponse) error
	Recv() (*MessageReceiveRequest, error)
	grpc.ServerStream
}

type webSocketServiceReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *webSocketServiceReceiveMessageServer) Send(m *MessageReceiveResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webSocketServiceReceiveMessageServer) Recv() (*MessageReceiveRequest, error) {
	m := new(MessageReceiveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebSocketService_ServiceDesc is the grpc.ServiceDesc for WebSocketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSocketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "canaanadvisors.WebSocketService",
	HandlerType: (*WebSocketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _WebSocketService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessage",
			Handler:       _WebSocketService_ReceiveMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/notification/messages.proto",
}
